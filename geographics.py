import csv
import re
import sqlite3
from operator import itemgetter

import matplotlib
import numpy as np

from sqlquerrer import plotter

currency_to_rub = {
    "AZN": 35.68,
    "BYR": 23.91,
    "EUR": 59.90,
    "GEL": 21.74,
    "KGS": 0.76,
    "KZT": 0.13,
    "RUR": 1,
    "UAH": 1.64,
    "USD": 60.66,
    "UZS": 0.0055,
}
countries = "Абхазия	Австралия	Австрия	Азербайджан	Албания	Алжир	Американское Самоа	Ангилья	Ангола	Андорра	Антарктида	Антигуа и Барбуда	Аргентина	Армения	Аруба	" \
            "Афганистан	Багамы	Бангладеш	Барбадос	Бахрейн	Беларусь	Белиз	Бельгия	Бенин	Бермуды	Болгария	Боливия, Многонациональное Государство	Бонайре, " \
            "Саба и Синт-Эстатиус	Босния и Герцеговина	Ботсвана	Бразилия	Британская территория в Индийском океане	Бруней-Даруссалам	Буркина-Фасо	Бурунди	Бутан	" \
            "Вануату	Венгрия	Венесуэла Боливарианская Республика	Виргинские острова, Британские	Виргинские острова, США	Вьетнам	Габон	Гаити	Гайана	Гамбия	Гана	Гваделупа	" \
            "Гватемала	Гвинея	Гвинея-Бисау	Германия	Гернси	Гибралтар	Гондурас	Гонконг	Гренада	Гренландия	Греция	Грузия	Гуам	Дания	Джерси	Джибути	Доминика	" \
            "Доминиканская Республика	Египет	Замбия	Западная Сахара	Зимбабве	Израиль	Индия	Индонезия	Иордания	Ирак	Иран, Исламская Республика	Ирландия	Исландия	" \
            "Испания	Италия	Йемен	Кабо-Верде	Казахстан	Камбоджа	Камерун	Канада	Катар	Кения	Кипр	Киргизия	Кирибати	Китай	Кокосовые (Килинг) острова	" \
            "Колумбия	Коморы	Конго	Конго, Демократическая Республика	Корея, Народно-Демократическая Республика	Корея, Республика	Коста-Рика	Кот д'Ивуар	Куба	Кувейт	" \
            "Кюрасао	Лаос	Латвия	Лесото	Ливан	Ливийская Арабская Джамахирия	Либерия	Лихтенштейн	Литва	Люксембург	Маврикий	Мавритания	Мадагаскар	Майотта	Макао	" \
            "Малави	Малайзия	Мали	Малые Тихоокеанские отдаленные острова Соединенных Штатов	Мальдивы	Мальта	Марокко	Мартиника	Маршалловы острова	Мексика	Микронезия, " \
            "Федеративные Штаты	Мозамбик	Молдова, Республика	Монако	Монголия	Монтсеррат	Мьянма	Намибия	Науру	Непал	Нигер	Нигерия	Нидерланды	Никарагуа	Ниуэ	" \
            "Новая Зеландия	Новая Каледония	Норвегия	Объединенные Арабские Эмираты	Оман	Остров Буве	Остров Мэн	Остров Норфолк	Остров Рождества	" \
            "Остров Херд и острова Макдональд	Острова Кайман	Острова Кука	Острова Теркс и Кайкос	Пакистан	Палау	Палестинская территория, оккупированная	Панама	" \
            "Папский Престол (Государство — город Ватикан)	Папуа-Новая Гвинея	Парагвай	Перу	Питкерн	Польша	Португалия	Пуэрто-Рико	Республика Македония	Реюньон	Россия	" \
            "Руанда	Румыния	Самоа	Сан-Марино	Сан-Томе и Принсипи	Саудовская Аравия	Святая Елена, Остров вознесения, Тристан-да-Кунья	Северные Марианские острова	Сен-Бартельми	" \
            "Сен-Мартен	Сенегал	Сент-Винсент и Гренадины	Сент-Китс и Невис	Сент-Люсия	Сент-Пьер и Микелон	Сербия	Сейшелы	Сингапур	Синт-Мартен	Сирийская Арабская Республика	" \
            "Словакия	Словения	Соединенное Королевство	Соединенные Штаты	Соломоновы острова	Сомали	Судан	Суринам	Сьерра-Леоне	Таджикистан	Таиланд	Тайвань (Китай)	" \
            "Танзания, Объединенная Республика	Тимор-Лесте	Того	Токелау	Тонга	Тринидад и Тобаго	Тувалу	Тунис	Туркмения	Турция	Уганда	Узбекистан	Украина	Уоллис и " \
            "Футуна	Уругвай	Фарерские острова	Фиджи	Филиппины	Финляндия	Фолклендские острова (Мальвинские)	Франция	Французская Гвиана	Французская Полинезия	" \
            "Французские Южные территории	Хорватия	Центрально-Африканская Республика	Чад	Черногория	Чешская Республика	Чили	Швейцария	Швеция	Шпицберген и Ян Майен	" \
            "Шри-Ланка	Эквадор	Экваториальная Гвинея	Эландские острова	Эль-Сальвадор	Эритрея	Эсватини	" \
            "Эстония	Эфиопия	Южная Африка	Южная Джорджия и Южные Сандвичевы острова	Южная Осетия	Южный Судан	Ямайка	Япония Великобритания"

def AddToDatabase(line):
    db = sqlite3.connect('testdb.sqlite3')
    sql = db.cursor()
    db.commit()
    sql.execute(f"INSERT INTO unfiltered VALUES(?,?,?,?,?)",(line[0],line[1],line[2],line[3],line[4]))
    db.commit()

def CurrencyConverter(line):
    for key in currency_to_rub:
        if key in line[4]:
            line[2]= line[2] * currency_to_rub[key]
    return line

name = 'vacancies_with_skills.csv'
lines =[]
with open(name,encoding= 'utf-8-sig') as f:
    reader = csv.reader(f)
    for row in reader:
        lines.append(row)
header = lines[0]
del lines[0]
list =[]
years =[]

cities =[]
for line in lines:
     if len(line) == len(header) and '' not in line and line[5] not in countries and '(' not in line[5]:
         if line[5] not in cities:
             cities.append(line[5])
         list.append(line)


dict = {}
moneyDict = {}
for i in range(len(list)):
     dict[list[i][5]] = 0
     moneyDict [list[i][5]] = 0

for line in list:
        line[2] = (float(line[2]) + float(line[3])) / 2
        if line[4]!='RUR':
            line = CurrencyConverter(line)
        for city in dict:
            if city == line[5]:
                dict[city]+=1
                moneyDict[city]+= line[2]


# for city in dict:
#     dict[city] = moneyDict[city] / dict[city]

sorted_dict = {}
sorted_keys = sorted(dict, key=dict.get)  # [1, 3, 2]

for w in sorted_keys:
    sorted_dict[w] = dict[w]
print(sorted_dict)
cities =[]
vacancies = []
#print(sorted_dict)
for city in sorted_dict:
    cities.append(city)
    vacancies.append(sorted_dict[city])

cities.reverse()
vacancies.reverse()

# for i in range(len(cities)):
#     print(cities[i])
#
# for i in range(len(vacancies)):
#     print(vacancies[i])

plotter(cities,vacancies)
 # {1: 1, 3: 4, 2: 9}




